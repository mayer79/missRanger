[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"/articles/missRanger.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Using missRanger","text":"aim vignette introduce {missRanger} imputation missing values explain use multiple imputation. {missRanger} uses {ranger} package (Wright Ziegler 2017) fast missing value imputation chained random forest. , can used alternative {missForest}, beautiful algorithm introduced (Stekhoven Buehlmann 2011). Basically, variable imputed predictions random forest using variables covariables. main function missRanger() iterates multiple times variables average --bag prediction error models stops improve. consider {missRanger}? fast. flexible intuitive apply: E.g. calling missRanger(data, . ~ 1) impute variables univariately, missRanger(data, Species ~ Sepal.Width) use Sepal.Width impute Species. can deal realistic variable types, even dates times without destroying original data structure. combines random forest imputation predictive mean matching. generates realistic variability avoids “new” values like 0.3334 0-1 coded variable. Like , missRanger() can used realistic multiple imputation scenarios, see e.g. (Rubin 1987) statistical background. examples , meet two functions {missRanger}: generateNA(): replace values data set missing values. missRanger(): impute missing values data frame.","code":""},{"path":"/articles/missRanger.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Using missRanger","text":"","code":"# From CRAN install.packages(\"missRanger\")  # Development version devtools::install_github(\"mayer79/missRanger\")"},{"path":"/articles/missRanger.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Using missRanger","text":"first generate data set 20% missing values per column fill missRanger().","code":"library(missRanger)  set.seed(84553)  head(iris) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa  # Generate data with missing values in all columns irisWithNA <- generateNA(iris, p = 0.2) head(irisWithNA) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5           NA         0.2  setosa #> 2          4.9         3.0          1.4          NA  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4           NA          NA           NA         0.2  setosa #> 5          5.0         3.6          1.4          NA  setosa #> 6          5.4         3.9           NA         0.4  setosa   # Impute missing values with missRanger irisImputed <- missRanger(irisWithNA, num.trees = 100, verbose = 0) head(irisImputed) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1     5.100000    3.500000     1.503583   0.2000000  setosa #> 2     4.900000    3.000000     1.400000   0.2845833  setosa #> 3     4.700000    3.200000     1.300000   0.2000000  setosa #> 4     5.673567    3.273117     2.505867   0.2000000  setosa #> 5     5.000000    3.600000     1.400000   0.1914333  setosa #> 6     5.400000    3.900000     1.509900   0.4000000  setosa"},{"path":"/articles/missRanger.html","id":"predictive-mean-matching","dir":"Articles","previous_headings":"Usage","what":"Predictive mean matching","title":"Using missRanger","text":"worked! Unfortunately, new values look somewhat unnatural due different rounding. like avoid , just set pmm.k argument positive number. imputations done process combined predictive mean matching (PMM) step, leading natural imputations improved distributional properties resulting values:","code":"irisImputed <- missRanger(irisWithNA, pmm.k = 3, num.trees = 100, verbose = 0) head(irisImputed) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          5.8         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.4         0.4  setosa"},{"path":"/articles/missRanger.html","id":"controlling-the-random-forests","dir":"Articles","previous_headings":"Usage","what":"Controlling the random forests","title":"Using missRanger","text":"missRanger() offers ... argument pass options ranger(), e.g. num.trees min.node.size. use “extremely randomized trees” variant 50 trees? simple!","code":"irisImputed_et <- missRanger(   irisWithNA,    pmm.k = 3,    splitrule = \"extratrees\",    num.trees = 50,    verbose = 0 ) head(irisImputed_et) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.3         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.8         2.7          1.3         0.2  setosa #> 5          5.0         3.6          1.4         0.4  setosa #> 6          5.4         3.9          1.3         0.4  setosa"},{"path":"/articles/missRanger.html","id":"use-in-pipe","dir":"Articles","previous_headings":"Usage","what":"Use in Pipe","title":"Using missRanger","text":"{missRanger} also plays well together pipe:","code":"iris |>   generateNA() |>   missRanger(verbose = 0) |>   head()"},{"path":"/articles/missRanger.html","id":"two-output-options","dir":"Articles","previous_headings":"Usage","what":"Two output options","title":"Using missRanger","text":"Since {missRanger} 2.4.0, setting data_only = FALSE allows just return imputed data, rather “missRanger” object containing information.","code":"(imp <- missRanger(irisWithNA, data_only = FALSE, verbose = 0)) #> missRanger object. Extract imputed data via $data #> - best iteration: 5  #> - best average OOB imputation error: 0.02276647  # Summary summary(imp) #> missRanger object. Extract imputed data via $data #> - best iteration: 5  #> - best average OOB imputation error: 0.02276647  #>  #> Sequence of OOB prediction errors: #>  #>      Sepal.Length Sepal.Width Petal.Length Petal.Width     Species #> [1,]   1.00000000  1.05103455  0.355630263  0.21719804 0.075000000 #> [2,]   0.03032799  0.08326453  0.006800955  0.01048203 0.008333333 #> [3,]   0.03118913  0.07219809  0.006673501  0.01263541 0.000000000 #> [4,]   0.02816872  0.07309112  0.005963934  0.01021492 0.000000000 #> [5,]   0.02908707  0.06850496  0.005953581  0.01028676 0.000000000 #> [6,]   0.02947424  0.06854362  0.005493755  0.01056056 0.000000000 #>  #> Corresponding means: #> [1] 0.53977257 0.02784177 0.02453923 0.02348774 0.02276647 0.02281443 #>  #> First rows of imputed data: #>  #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5     1.494435   0.2000000  setosa #> 2          4.9         3.0     1.400000   0.2630367  setosa #> 3          4.7         3.2     1.300000   0.2000000  setosa"},{"path":"/articles/missRanger.html","id":"formula-interface","dir":"Articles","previous_headings":"Usage","what":"Formula interface","title":"Using missRanger","text":"default missRanger() uses columns data set impute columns missings. override behaviour, can use intuitive formula interface: left hand side specifies variables imputed (variable names separated +), right hand side lists variables used imputation.","code":"# Impute all variables with all (default behaviour). Note that variables without # missing values will be skipped from the left hand side of the formula. m <- missRanger(   irisWithNA, formula = . ~ ., pmm.k = 3, num.trees = 10, seed = 1, verbose = 0 ) head(m) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.6         0.2  setosa #> 2          4.9         3.0          1.4         0.3  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          5.5         3.6          4.4         0.2  setosa #> 5          5.0         3.6          1.4         0.3  setosa #> 6          5.4         3.9          1.4         0.4  setosa  # Same m <- missRanger(irisWithNA, pmm.k = 3, num.trees = 10, seed = 1, verbose = 0) head(m) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.6         0.2  setosa #> 2          4.9         3.0          1.4         0.3  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          5.5         3.6          4.4         0.2  setosa #> 5          5.0         3.6          1.4         0.3  setosa #> 6          5.4         3.9          1.4         0.4  setosa  # Impute all variables with all except Species m <- missRanger(irisWithNA, . ~ . - Species, pmm.k = 3, num.trees = 10, verbose = 0) head(m) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.5         0.2  setosa #> 2          4.9         3.0          1.4         0.1  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.8         3.1          1.2         0.2  setosa #> 5          5.0         3.6          1.4         0.1  setosa #> 6          5.4         3.9          1.4         0.4  setosa  # Impute Sepal.Width by Species  m <- missRanger(   irisWithNA, Sepal.Width ~ Species, pmm.k = 3, num.trees = 10, verbose = 0 ) head(m) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5           NA         0.2  setosa #> 2          4.9         3.0          1.4          NA  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4           NA         3.1           NA         0.2  setosa #> 5          5.0         3.6          1.4          NA  setosa #> 6          5.4         3.9           NA         0.4  setosa  # No success. Why? Species contains missing values and thus can only  # be used for imputation if it is being imputed as well m <- missRanger(   irisWithNA, Sepal.Width + Species ~ Species, pmm.k = 3, num.trees = 10, verbose = 0 ) head(m) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5           NA         0.2  setosa #> 2          4.9         3.0          1.4          NA  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4           NA         3.0           NA         0.2  setosa #> 5          5.0         3.6          1.4          NA  setosa #> 6          5.4         3.9           NA         0.4  setosa  # Impute all variables univariatly m <- missRanger(irisWithNA, . ~ 1, verbose = 0) head(m) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          4.5         0.2  setosa #> 2          4.9         3.0          1.4         2.3  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          5.8         3.8          5.2         0.2  setosa #> 5          5.0         3.6          1.4         2.3  setosa #> 6          5.4         3.9          5.8         0.4  setosa"},{"path":"/articles/missRanger.html","id":"imputation-takes-too-much-time--what-can-i-do","dir":"Articles","previous_headings":"Usage","what":"Imputation takes too much time. What can I do?","title":"Using missRanger","text":"missRanger() based iteratively fitting random forests variable missing values. Since underlying random forest implementation ranger() uses 500 trees per default, huge number trees might calculated. larger data sets, overall process can take long. tweaks make things faster: Use less trees, e.g. setting num.trees = 50. Even one single tree might sufficient. Typically, number iterations convergence increase fewer trees though. Use smaller bootstrap samples setting e.g. sample.fraction = 0.1. Use less greedy splitrule = \"extratrees\". Use low tree depth max.depth = 6. Use large leafs, e.g. min.node.size = 10000. Use low max.iter, e.g. 1 2. Evaluated normal laptop:","code":"library(ggplot2) # for diamonds data dim(diamonds) # 53940    10  diamonds_with_NA <- generateNA(diamonds)  # Takes 270 seconds (10 * 500 trees per iteration!) system.time(   m <- missRanger(diamonds_with_NA, pmm.k = 3) )  # Takes 19 seconds system.time(   m <- missRanger(diamonds_with_NA, pmm.k = 3, num.trees = 50) )  # Takes 6 seconds system.time(   m <- missRanger(diamonds_with_NA, pmm.k = 3, num.trees = 1) )  # Takes 9 seconds system.time(   m <- missRanger(diamonds_with_NA, pmm.k = 3, num.trees = 50, sample.fraction = 0.1) )"},{"path":"/articles/missRanger.html","id":"trick-use-case-weights-to-weight-down-contribution-of-rows-with-many-missings","dir":"Articles","previous_headings":"Usage","what":"Trick: Use case.weights to weight down contribution of rows with many missings","title":"Using missRanger","text":"Using case.weights argument, can pass case weights imputation models. might useful weight contribution rows many missings.","code":"# Count the number of non-missing values per row non_miss <- rowSums(!is.na(irisWithNA)) table(non_miss) #> non_miss #>  1  2  3  4  5  #>  2  6 28 68 46  # No weighting m <- missRanger(irisWithNA, num.trees = 20, pmm.k = 3, seed = 5, verbose = 0) head(m) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.5         0.2  setosa #> 2          4.9         3.0          1.4         0.1  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          5.7         3.8          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.5         0.4  setosa  # Weighted by number of non-missing values per row.  m <- missRanger(   irisWithNA, num.trees = 20, pmm.k = 3, seed = 5, verbose = 0, case.weights = non_miss ) head(m) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.3         0.2  setosa #> 2          4.9         3.0          1.4         0.1  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          5.4         3.4          1.4         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.1         0.4  setosa"},{"path":[]},{"path":"/articles/multiple_imputation.html","id":"how-to-use-missranger-for-multiple-imputation","dir":"Articles","previous_headings":"","what":"How to use {missRanger} for multiple imputation?","title":"Multiple Imputation","text":"machine learning tasks, imputation typically seen fixed data preparation step like dummy coding. , multiple imputation rarely applied adds another level complexity analysis. might fine since good validation schema account variation introduced imputation. tasks focus statistical inference (p values, standard errors, confidence intervals, estimation effects), extra variability introduced imputation accounted except missing values appear. One standard approaches impute data set multiple times, generating e.g. 10 100 versions complete data set. , intended analysis (t-test, linear model etc.) applied independently complete data sets. results combined afterward pooling step, usually Rubin’s rule (Rubin 1987). parameter estimates, averages taken. variance basically combination average squared standard errors plus variance parameter estimates across imputed data sets, leading inflated standard errors thus larger p values wider confidence intervals. package {mice} (Buuren Groothuis-Oudshoorn 2011) takes care pooling step. creation multiple complete data sets can done {mice} also {missRanger}. latter case, order keep variance imputed values realistic level, suggest use predictive mean matching top random forest imputation. following example shows easy workflow looks like. standard errors p values multiple imputation larger original data set. reflects additional uncertainty introduced presence missing values realistic way.","code":"library(missRanger) library(mice)  set.seed(19)  irisWithNA <- generateNA(iris, p = c(0, 0.1, 0.1, 0.1, 0.1))  # Generate 20 complete data sets filled <- replicate(   20,    missRanger(irisWithNA, verbose = 0, num.trees = 50, pmm.k = 5),    simplify = FALSE )                             # Run a linear model for each of the completed data sets                           models <- lapply(filled, function(x) lm(Sepal.Length ~ ., x))  # Pool the results by mice summary(pooled_fit <- pool(models))  #                term   estimate std.error  statistic       df      p.value # 1       (Intercept)  2.5366092 0.3575478  7.0944612 74.48225 6.365362e-10 # 2       Sepal.Width  0.4262516 0.1104055  3.8607804 81.52526 2.253823e-04 # 3      Petal.Length  0.7311306 0.0895942  8.1604670 60.04758 2.595957e-11 # 4       Petal.Width -0.1840820 0.1856190 -0.9917193 68.08826 3.248458e-01 # 5 Speciesversicolor -0.6755016 0.2907406 -2.3233824 82.80105 2.261132e-02 # 6  Speciesvirginica -0.8584752 0.3970706 -2.1620217 81.93105 3.353349e-02  # Compare with model on original data summary(lm(Sepal.Length ~ ., data = iris))  # Coefficients: #                   Estimate Std. Error t value Pr(>|t|)     # (Intercept)        2.17127    0.27979   7.760 1.43e-12 *** # Sepal.Width        0.49589    0.08607   5.761 4.87e-08 *** # Petal.Length       0.82924    0.06853  12.101  < 2e-16 *** # Petal.Width       -0.31516    0.15120  -2.084  0.03889 *   # Speciesversicolor -0.72356    0.24017  -3.013  0.00306 **  # Speciesvirginica  -1.02350    0.33373  -3.067  0.00258 **  # --- # Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #  # Residual standard error: 0.3068 on 144 degrees of freedom # Multiple R-squared:  0.8673,  Adjusted R-squared:  0.8627  # F-statistic: 188.3 on 5 and 144 DF,  p-value: < 2.2e-16"},{"path":[]},{"path":"/articles/working_with_censoring.html","id":"how-to-deal-with-censored-variables","dir":"Articles","previous_headings":"","what":"How to deal with censored variables?","title":"Censored Variables","text":"obvious way deal survival variables covariables imputation models. Options discussed (White Royston 2009) include: Use status variable \\(s\\) (censored) time variable \\(t\\) \\(s\\) \\(\\log(t)\\) \\(\\text{surv}(t)\\), , optionally \\(s\\) \\(\\text{surv}(t)\\), denote Nelson-Aalen survival estimate value \\(t\\). third option elegant one explicitly deals censoring information. provide additional details example.","code":""},{"path":"/articles/working_with_censoring.html","id":"example","dir":"Articles","previous_headings":"How to deal with censored variables?","what":"Example","title":"Censored Variables","text":"illustration, use data randomized two-arm trial lung cancer. aim estimate treatment effect “trt” reliable inference using Cox regression. Unfortunately, added missing values covariables “age”, “karno”, “diagtime”. reasonable way estimate covariable adjusted treatment effect following: Add Nelson-Aalen survival estimates “surv” dataset. Use “surv” well covariables impute missing values covariables multiple times. Perform intended Cox regression imputed data sets. Pool results Rubin’s rule (Rubin 1987), using package {mice} (Buuren Groothuis-Oudshoorn 2011).","code":"library(missRanger) library(survival) library(mice)  set.seed(65)  head(veteran)  #   trt celltype time status karno diagtime age prior # 1   1 squamous   72      1    60        7  69     0 # 2   1 squamous  411      1    70        5  64    10 # 3   1 squamous  228      1    60        3  38     0 # 4   1 squamous  126      1    60        9  63    10 # 5   1 squamous  118      1    70       11  65    10 # 6   1 squamous   10      1    20        5  49     0  # 1. Calculate Nelson-Aalen survival probabilities for each time point nelson_aalen <- summary(   survfit(Surv(time, status) ~ 1, data = veteran),    times = unique(veteran$time) )[c(\"time\", \"surv\")] nelson_aalen <- data.frame(nelson_aalen)  # Add it to the original data set veteran2 <- merge(veteran, nelson_aalen, all.x = TRUE)  # Add missing values to make things tricky veteran2 <- generateNA(veteran2, p = c(age = 0.1, karno = 0.1, diagtime = 0.1))  # 2. Generate 20 complete data sets, representing \"time\" and \"status\" by \"surv\" filled <- replicate(   20,    missRanger(     veteran2, . ~ . - time - status,      verbose = 0,      pmm.k = 3,      num.trees = 25   ),    simplify = FALSE )  # 3. Run a Cox regression for each of the completed data sets models <- lapply(filled, function(x) coxph(Surv(time, status) ~ . - surv, x))  # 4. Pool the results by mice summary(pooled_fit <- pool(models))  #                term     estimate   std.error  statistic        df      p.value # 1               trt  0.245855250 0.212810467  1.1552780 108.72929 2.505091e-01 # 2 celltypesmallcell  0.805233656 0.284424937  2.8310937 114.17088 5.483657e-03 # 3     celltypeadeno  1.110172771 0.307570269  3.6094931 111.91588 4.603422e-04 # 4     celltypelarge  0.328227283 0.291163500  1.1272954 109.30510 2.620862e-01 # 5             karno -0.031838682 0.005663349 -5.6218824 112.60325 1.390333e-07 # 6          diagtime  0.002775351 0.009382270  0.2958081  86.61582 7.680847e-01 # 7               age -0.007843577 0.009293988 -0.8439410 107.86917 4.005701e-01 # 8             prior  0.003165245 0.023501821  0.1346809 111.84783 8.931063e-01  # Compare with the results on the original data summary(coxph(Surv(time, status) ~ ., veteran))$coefficients  #                            coef exp(coef)    se(coef)            z     Pr(>|z|) # trt                2.946028e-01 1.3425930 0.207549604  1.419433313 1.557727e-01 # celltypesmallcell  8.615605e-01 2.3668512 0.275284474  3.129709606 1.749792e-03 # celltypeadeno      1.196066e+00 3.3070825 0.300916994  3.974738536 7.045662e-05 # celltypelarge      4.012917e-01 1.4937529 0.282688638  1.419553530 1.557377e-01 # karno             -3.281533e-02 0.9677173 0.005507757 -5.958020093 2.553121e-09 # diagtime           8.132051e-05 1.0000813 0.009136062  0.008901046 9.928981e-01 # age               -8.706475e-03 0.9913313 0.009300299 -0.936149992 3.491960e-01 # prior              7.159360e-03 1.0071850 0.023230538  0.308187441 7.579397e-01"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Mayer. Author, maintainer, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mayer M (2024). missRanger: Fast Imputation Missing Values. R package version 2.4.0, https://mayer79.github.io/missRanger/, https://github.com/mayer79/missRanger.","code":"@Manual{,   title = {missRanger: Fast Imputation of Missing Values},   author = {Michael Mayer},   year = {2024},   note = {R package version 2.4.0, https://mayer79.github.io/missRanger/},   url = {https://github.com/mayer79/missRanger}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Fast Imputation of Missing Values","text":"{missRanger} uses {ranger} package fast missing value imputation chained random forest. , serves alternative implementation beautiful ‘MissForest’ algorithm, see vignette. main function missRanger() offers option combine random forest imputation predictive mean matching. firstly avoids generation values present original data (like value 0.3334 0-1 coded variable). Secondly, step tends raise variance resulting conditional distributions realistic level, crucial element apply multiple imputation frameworks.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fast Imputation of Missing Values","text":"","code":"# From CRAN install.packages(\"missRanger\")  # Development version devtools::install_github(\"mayer79/missRanger\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Fast Imputation of Missing Values","text":"first generate data set 10% missing values column. gaps filled missRanger(). end, resulting data frame displayed. Check vignettes info.","code":"library(missRanger)   # Generate data with missing values in all columns irisWithNA <- generateNA(iris, seed = 347)   # Impute missing values irisImputed <- missRanger(irisWithNA, pmm.k = 3, num.trees = 100)   # Check results head(irisImputed) head(irisWithNA) head(iris)  # Replace random forest by extremely randomized trees irisImputed_et <- missRanger(   irisWithNA,    pmm.k = 3,    splitrule = \"extratrees\",    num.trees = 100 )  # Using the pipe... iris |>    generateNA() |>    missRanger(pmm.k = 5, verbose = 0) |>    head()    # More infos via `data_only = FALSE` imp <- missRanger(irisWithNA, pmm.k = 3, data_only = FALSE, seed = 3) summary(imp)  # missRanger object. Extract imputed data via $data # - best iteration: 3  # - best average OOB imputation error: 0.02058243  #  # Sequence of OOB prediction errors: #  #      Sepal.Length Sepal.Width Petal.Length Petal.Width    Species # [1,]   1.00000000  1.03868004  0.267209559 0.103679645 0.08148148 # [2,]   0.02948771  0.05997235  0.005676231 0.007813704 0.00000000 # [3,]   0.02709505  0.06268752  0.004921649 0.008207934 0.00000000 # [4,]   0.02673459  0.06504868  0.005183209 0.008761418 0.00000000 #  # Corresponding means: # [1] 0.49821014 0.02059000 0.02058243 0.02114558 #  # First rows of imputed data: #  #   Sepal.Length Sepal.Width Petal.Length Petal.Width Species # 1          5.1         3.5          1.4         0.2  setosa # 2          4.9         3.0          1.4         0.2  setosa # 3          4.7         3.2          1.6         0.2  setosa"},{"path":"/reference/generateNA.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds Missing Values — generateNA","title":"Adds Missing Values — generateNA","text":"Takes vector, matrix data.frame replaces values NA.","code":""},{"path":"/reference/generateNA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds Missing Values — generateNA","text":"","code":"generateNA(x, p = 0.1, seed = NULL)"},{"path":"/reference/generateNA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds Missing Values — generateNA","text":"x vector, matrix data.frame. p Proportion missing values add x. case x data.frame, p can also vector probabilities per column named vector (see examples). seed integer seed.","code":""},{"path":"/reference/generateNA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds Missing Values — generateNA","text":"x missing values.","code":""},{"path":"/reference/generateNA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds Missing Values — generateNA","text":"","code":"generateNA(1:10, p = 0.5, seed = 3345) #>  [1] NA NA  3 NA  5 NA  7 NA  9 10 generateNA(rep(Sys.Date(), 10)) #>  [1] \"2024-02-02\" \"2024-02-02\" \"2024-02-02\" \"2024-02-02\" \"2024-02-02\" #>  [6] \"2024-02-02\" NA           \"2024-02-02\" \"2024-02-02\" \"2024-02-02\" generateNA(cbind(1:10, 10:1), p = 0.2) #>       [,1] [,2] #>  [1,]    1   10 #>  [2,]   NA    9 #>  [3,]    3    8 #>  [4,]   NA    7 #>  [5,]    5    6 #>  [6,]   NA    5 #>  [7,]    7    4 #>  [8,]    8    3 #>  [9,]    9   NA #> [10,]   10    1 head(generateNA(iris)) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4          NA          1.7          NA  setosa head(generateNA(iris, p = 0.2)) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2    <NA> #> 2          4.9         3.0           NA         0.2  setosa #> 3          4.7          NA           NA          NA  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5           NA         3.6          1.4          NA    <NA> #> 6           NA         3.9           NA         0.4  setosa head(generateNA(iris, p = c(0, 1, 0.5, 0.5, 0.5))) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1          NA           NA          NA  setosa #> 2          4.9          NA          1.4         0.2  setosa #> 3          4.7          NA           NA         0.2  setosa #> 4          4.6          NA           NA          NA    <NA> #> 5          5.0          NA          1.4          NA    <NA> #> 6          5.4          NA          1.7          NA  setosa head(generateNA(iris, p = c(Sepal.Length = 1))) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1           NA         3.5          1.4         0.2  setosa #> 2           NA         3.0          1.4         0.2  setosa #> 3           NA         3.2          1.3         0.2  setosa #> 4           NA         3.1          1.5         0.2  setosa #> 5           NA         3.6          1.4         0.2  setosa #> 6           NA         3.9          1.7         0.4  setosa head(generateNA(iris, p = c(Species = 0.2, Sepal.Length = 0.5))) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1           NA         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2    <NA> #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6           NA         3.9          1.7         0.4  setosa"},{"path":"/reference/imputeUnivariate.html","id":null,"dir":"Reference","previous_headings":"","what":"Univariate Imputation — imputeUnivariate","title":"Univariate Imputation — imputeUnivariate","text":"Fills missing values vector, matrix data frame sampling replacement non-missing values. data frames, sampling done within column.","code":""},{"path":"/reference/imputeUnivariate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Univariate Imputation — imputeUnivariate","text":"","code":"imputeUnivariate(x, v = NULL, seed = NULL)"},{"path":"/reference/imputeUnivariate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Univariate Imputation — imputeUnivariate","text":"x vector, matrix data frame. v character vector column names impute (relevant x data frame). default NULL imputes columns. seed integer seed.","code":""},{"path":"/reference/imputeUnivariate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Univariate Imputation — imputeUnivariate","text":"x imputed values.","code":""},{"path":"/reference/imputeUnivariate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Univariate Imputation — imputeUnivariate","text":"","code":"imputeUnivariate(c(NA, 0, 1, 0, 1)) #> [1] 0 0 1 0 1 imputeUnivariate(c(\"A\", \"A\", NA)) #> [1] \"A\" \"A\" \"A\" imputeUnivariate(as.factor(c(\"A\", \"A\", NA))) #> [1] A A A #> Levels: A head(imputeUnivariate(generateNA(iris))) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.3          1.4         0.2  setosa #> 3          4.7         3.1          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.4  setosa #> 6          5.4         3.9          1.7         0.4  setosa head(imputeUnivariate(generateNA(iris), v = \"Species\")) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5           NA         0.2  setosa #> 2          4.9         3.0          1.4          NA  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6           NA         3.9          1.7         0.4  setosa head(imputeUnivariate(generateNA(iris), v = c(\"Species\", \"Petal.Length\"))) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa"},{"path":"/reference/missRanger.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast Imputation of Missing Values by Chained Random Forests — missRanger","title":"Fast Imputation of Missing Values by Chained Random Forests — missRanger","text":"Uses \"ranger\" package (Wright & Ziegler) fast missing value imputation chained random forests, see Stekhoven & Buehlmann Van Buuren & Groothuis-Oudshoorn. iterative model fitting, offers option predictive mean matching. firstly avoids imputation values present original data (like value 0.3334 0-1 coded variable). Secondly, predictive mean matching tries raise variance resulting conditional distributions realistic level. allows multiple imputation repeating call missRanger().","code":""},{"path":"/reference/missRanger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast Imputation of Missing Values by Chained Random Forests — missRanger","text":"","code":"missRanger(   data,   formula = . ~ .,   pmm.k = 0L,   maxiter = 10L,   seed = NULL,   verbose = 1,   returnOOB = FALSE,   case.weights = NULL,   data_only = TRUE,   keep_forests = FALSE,   ... )"},{"path":"/reference/missRanger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast Imputation of Missing Values by Chained Random Forests — missRanger","text":"data data.frame missing values impute. formula two-sided formula specifying variables imputed (left hand side) variables used impute (right hand side). Defaults . ~ ., .e., use variables impute variables. instance, variables (missings) imputed variables except variable \"ID\", use . ~ . - ID. Note \".\" evaluated separately side formula. note variables missings must appear left hand side used right hand side. pmm.k Number candidate non-missing values sample predictive mean matching steps. 0 avoid step. maxiter Maximum number chaining iterations. seed Integer seed initialize random generator. verbose Controls much info printed screen. 0 print nothing. 1 (default) print progress bar per iteration, 2 print OOB prediction error per iteration variable (1 minus R-squared regression). Furthermore, verbose positive, variables used imputation listed well variables imputed (imputation order). useful detect variables unexpectedly skipped. returnOOB Logical flag. TRUE, final average --bag prediction errors per variable added resulting data attribute \"oob\". relevant data_only = TRUE (forests grown). case.weights Vector non-negative case weights. data_only TRUE (default), imputed data returned. Otherwise, \"missRanger\" object additional information returned. keep_forests random forests final imputations returned? default FALSE. Setting option use lot memory. relevant data_only = TRUE (forests grown). ... Arguments passed ranger::ranger(). data set large, better use less trees (e.g. num.trees = 20) /low value sample.fraction. following arguments incompatible, amongst others: write.forest, probability, split.select.weights, dependent.variable.name, classification.","code":""},{"path":"/reference/missRanger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast Imputation of Missing Values by Chained Random Forests — missRanger","text":"data_only imputed data.frame. Otherwise, \"missRanger\" object following elements can extracted via $: data: imputed data. forests: keep_forests = TRUE, list \"ranger\" models used generate imputed data. NULL otherwise. visit_seq: Variables imputed (order). impute_by: Variables used imputation. best_iter: Best iteration. pred_errors: Per-iteration OOB prediction errors (1 - R^2 regression, classification error otherwise). mean_pred_errors: Per-iteration averages OOB prediction errors.","code":""},{"path":"/reference/missRanger.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast Imputation of Missing Values by Chained Random Forests — missRanger","text":"iterative chaining stops soon maxiter reached average --bag (OOB) prediction errors stop reducing. latter case, except first iteration, second last (= best) imputed data returned. OOB prediction errors quantified 1 - R^2 numeric variables, classification error otherwise. variable imputed univariately, value 1. note mtry: careful passing non-default mtry ranger::ranger() number available covariates might growing first iteration, depending missing pattern. Values NULL (default) 1 safe choices. Additionally, recent versions ranger::ranger() allow mtry single-argument function number available covariables, e.g., mtry = function(m) max(1, m %/% 3).","code":""},{"path":"/reference/missRanger.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fast Imputation of Missing Values by Chained Random Forests — missRanger","text":"Wright, M. N. & Ziegler, . (2016). ranger: Fast Implementation Random Forests High Dimensional Data C++ R. Journal Statistical Software, press. <arxiv.org/abs/1508.04409>. Stekhoven, D.J. Buehlmann, P. (2012). 'MissForest - nonparametric missing value imputation mixed-type data', Bioinformatics, 28(1) 2012, 112-118. https://doi.org/10.1093/bioinformatics/btr597. Van Buuren, S., Groothuis-Oudshoorn, K. (2011). mice: Multivariate Imputation Chained Equations R. Journal Statistical Software, 45(3), 1-67. http://www.jstatsoft.org/v45/i03/","code":""},{"path":"/reference/missRanger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast Imputation of Missing Values by Chained Random Forests — missRanger","text":"","code":"irisWithNA <- generateNA(iris, seed = 34) irisImputed <- missRanger(irisWithNA, pmm.k = 3, num.trees = 100) #>  #> Missing value imputation by random forests #>  #>   Variables to impute:\t\tSepal.Length, Sepal.Width, Petal.Length, Petal.Width, Species #>   Variables used to impute:\tSepal.Length, Sepal.Width, Petal.Length, Petal.Width, Species #>  #> iter 1 #>    |                                                                               |                                                                      |   0%   |                                                                               |==============                                                        |  20%   |                                                                               |============================                                          |  40%   |                                                                               |==========================================                            |  60%   |                                                                               |========================================================              |  80%   |                                                                               |======================================================================| 100% #> iter 2 #>    |                                                                               |                                                                      |   0%   |                                                                               |==============                                                        |  20%   |                                                                               |============================                                          |  40%   |                                                                               |==========================================                            |  60%   |                                                                               |========================================================              |  80%   |                                                                               |======================================================================| 100% #> iter 3 #>    |                                                                               |                                                                      |   0%   |                                                                               |==============                                                        |  20%   |                                                                               |============================                                          |  40%   |                                                                               |==========================================                            |  60%   |                                                                               |========================================================              |  80%   |                                                                               |======================================================================| 100% #> iter 4 #>    |                                                                               |                                                                      |   0%   |                                                                               |==============                                                        |  20%   |                                                                               |============================                                          |  40%   |                                                                               |==========================================                            |  60%   |                                                                               |========================================================              |  80%   |                                                                               |======================================================================| 100% head(irisImputed) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa head(irisWithNA) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2    <NA> #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa  if (FALSE) { # Extended output imp <- missRanger(irisWithNA, pmm.k = 3, num.trees = 100, data_only = FALSE) head(imp$data) imp$pred_errors  # If you even want to keep the random forests of the best iteration imp <- missRanger(   irisWithNA, pmm.k = 3, num.trees = 100, data_only = FALSE, keep_forests = TRUE ) imp$forests$Sepal.Width imp$pred_errors[imp$best_iter, \"Sepal.Width\"]  # 1 - R-squared }"},{"path":"/reference/pmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictive Mean Matching — pmm","title":"Predictive Mean Matching — pmm","text":"value prediction vector xtest, one closest k values prediction vector xtrain randomly chosen observed value ytrain returned.","code":""},{"path":"/reference/pmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictive Mean Matching — pmm","text":"","code":"pmm(xtrain, xtest, ytrain, k = 1L, seed = NULL)"},{"path":"/reference/pmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictive Mean Matching — pmm","text":"xtrain Vector predicted values training data. Can type logical, numeric, character, factor. xtest Vector xtrain predicted values test data. Missing values allowed. ytrain Vector observed values training data. Must length xtrain. Missing values either xtrain ytrain dropped pairwise manner. k Number nearest neighbours sample . seed Integer random seed.","code":""},{"path":"/reference/pmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictive Mean Matching — pmm","text":"Vector length xtest values xtrain.","code":""},{"path":"/reference/pmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictive Mean Matching — pmm","text":"","code":"pmm(xtrain = c(0.2, 0.2, 0.8), xtest = 0.3, ytrain = c(0, 0, 1)) # 0 #> [1] 0 pmm(xtrain = c(TRUE, FALSE, TRUE), xtest = FALSE, ytrain = c(2, 0, 1)) # 0 #> [1] 0 pmm(xtrain = c(0.2, 0.8), xtest = 0.3, ytrain = c(\"A\", \"B\"), k = 2) # \"A\" or \"B\" #> [1] \"B\" pmm(xtrain = c(\"A\", \"A\", \"B\"), xtest = \"A\", ytrain = c(2, 2, 4), k = 2) # 2 #> [1] 2 pmm(xtrain = factor(c(\"A\", \"B\")), xtest = factor(\"C\"), ytrain = 1:2) # 2 #> [1] 2"},{"path":"/reference/print.missRanger.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method — print.missRanger","title":"Print Method — print.missRanger","text":"Print method object class \"missRanger\".","code":""},{"path":"/reference/print.missRanger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method — print.missRanger","text":"","code":"# S3 method for missRanger print(x, ...)"},{"path":"/reference/print.missRanger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method — print.missRanger","text":"x object class \"missRanger\". ... arguments passed methods.","code":""},{"path":"/reference/print.missRanger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method — print.missRanger","text":"Invisibly, input returned.","code":""},{"path":"/reference/print.missRanger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method — print.missRanger","text":"","code":"CO2_ <- generateNA(CO2, seed = 1) imp <- missRanger(CO2_, pmm.k = 5, data_only = FALSE, num.threads = 1) #>  #> Missing value imputation by random forests #>  #>   Variables to impute:\t\tPlant, Type, Treatment, conc, uptake #>   Variables used to impute:\tPlant, Type, Treatment, conc, uptake #>  #> iter 1 #>    |                                                                               |                                                                      |   0%   |                                                                               |==============                                                        |  20%   |                                                                               |============================                                          |  40%   |                                                                               |==========================================                            |  60%   |                                                                               |========================================================              |  80%   |                                                                               |======================================================================| 100% #> iter 2 #>    |                                                                               |                                                                      |   0%   |                                                                               |==============                                                        |  20%   |                                                                               |============================                                          |  40%   |                                                                               |==========================================                            |  60%   |                                                                               |========================================================              |  80%   |                                                                               |======================================================================| 100% #> iter 3 #>    |                                                                               |                                                                      |   0%   |                                                                               |==============                                                        |  20%   |                                                                               |============================                                          |  40%   |                                                                               |==========================================                            |  60%   |                                                                               |========================================================              |  80%   |                                                                               |======================================================================| 100% #> iter 4 #>    |                                                                               |                                                                      |   0%   |                                                                               |==============                                                        |  20%   |                                                                               |============================                                          |  40%   |                                                                               |==========================================                            |  60%   |                                                                               |========================================================              |  80%   |                                                                               |======================================================================| 100% #> iter 5 #>    |                                                                               |                                                                      |   0%   |                                                                               |==============                                                        |  20%   |                                                                               |============================                                          |  40%   |                                                                               |==========================================                            |  60%   |                                                                               |========================================================              |  80%   |                                                                               |======================================================================| 100% imp #> missRanger object. Extract imputed data via $data #> - best iteration: 4  #> - best average OOB imputation error: 0.02631534"},{"path":"/reference/summary.missRanger.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method — summary.missRanger","title":"Summary Method — summary.missRanger","text":"Summary method object class \"missRanger\".","code":""},{"path":"/reference/summary.missRanger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method — summary.missRanger","text":"","code":"# S3 method for missRanger summary(object, ...)"},{"path":"/reference/summary.missRanger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method — summary.missRanger","text":"object object class \"missRanger\". ... arguments passed methods.","code":""},{"path":"/reference/summary.missRanger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method — summary.missRanger","text":"Invisibly, input returned.","code":""},{"path":"/reference/summary.missRanger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Method — summary.missRanger","text":"","code":"CO2_ <- generateNA(CO2, seed = 1) imp <- missRanger(CO2_, pmm.k = 5, data_only = FALSE, num.threads = 1) #>  #> Missing value imputation by random forests #>  #>   Variables to impute:\t\tPlant, Type, Treatment, conc, uptake #>   Variables used to impute:\tPlant, Type, Treatment, conc, uptake #>  #> iter 1 #>    |                                                                               |                                                                      |   0%   |                                                                               |==============                                                        |  20%   |                                                                               |============================                                          |  40%   |                                                                               |==========================================                            |  60%   |                                                                               |========================================================              |  80%   |                                                                               |======================================================================| 100% #> iter 2 #>    |                                                                               |                                                                      |   0%   |                                                                               |==============                                                        |  20%   |                                                                               |============================                                          |  40%   |                                                                               |==========================================                            |  60%   |                                                                               |========================================================              |  80%   |                                                                               |======================================================================| 100% #> iter 3 #>    |                                                                               |                                                                      |   0%   |                                                                               |==============                                                        |  20%   |                                                                               |============================                                          |  40%   |                                                                               |==========================================                            |  60%   |                                                                               |========================================================              |  80%   |                                                                               |======================================================================| 100% #> iter 4 #>    |                                                                               |                                                                      |   0%   |                                                                               |==============                                                        |  20%   |                                                                               |============================                                          |  40%   |                                                                               |==========================================                            |  60%   |                                                                               |========================================================              |  80%   |                                                                               |======================================================================| 100% #> iter 5 #>    |                                                                               |                                                                      |   0%   |                                                                               |==============                                                        |  20%   |                                                                               |============================                                          |  40%   |                                                                               |==========================================                            |  60%   |                                                                               |========================================================              |  80%   |                                                                               |======================================================================| 100% summary(imp) #> missRanger object. Extract imputed data via $data #> - best iteration: 4  #> - best average OOB imputation error: 0.02631534  #>  #> Sequence of OOB prediction errors: #>  #>           Plant       Type  Treatment       conc     uptake #> [1,] 1.00000000 0.02631579 0.03947368 1.11142723 0.19045686 #> [2,] 0.06578947 0.00000000 0.00000000 0.06046464 0.02267804 #> [3,] 0.05263158 0.00000000 0.00000000 0.07430110 0.01998083 #> [4,] 0.05263158 0.00000000 0.00000000 0.05884572 0.02009939 #> [5,] 0.07894737 0.00000000 0.00000000 0.06497536 0.01996116 #>  #> Corresponding means: #> [1] 0.47353471 0.02978643 0.02938270 0.02631534 0.03277678 #>  #> First rows of imputed data: #>  #>   Plant   Type  Treatment conc uptake #> 1   Qn3 Quebec nonchilled   95   16.0 #> 2   Qn1 Quebec nonchilled  175   30.4 #> 3   Qn1 Quebec nonchilled  250   34.8"},{"path":"/news/index.html","id":"missranger-240","dir":"Changelog","previous_headings":"","what":"missRanger 2.4.0","title":"missRanger 2.4.0","text":"CRAN release: 2023-11-19","code":""},{"path":"/news/index.html","id":"future-output-api-2-4-0","dir":"Changelog","previous_headings":"","what":"Future Output API","title":"missRanger 2.4.0","text":"New argument data_only = TRUE control imputed data returned (default), object class “missRanger”. object contains imputed data infos like OOB prediction errors, fixing #28. value FALSE later becoming default {missRanger 3.0.0}. announced via deprecation cycle.","code":""},{"path":"/news/index.html","id":"enhancements-2-4-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"missRanger 2.4.0","text":"New argument keep_forests = FALSE. random forests best iteration (one generated final imputed data) added “missRanger” object? Note use lot memory. relevant data_only = FALSE. solves #54.","code":""},{"path":"/news/index.html","id":"bug-fixes-2-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"missRanger 2.4.0","text":"case algorithm converge, data last iteration returned instead current one. fixed.","code":""},{"path":"/news/index.html","id":"missranger-230","dir":"Changelog","previous_headings":"","what":"missRanger 2.3.0","title":"missRanger 2.3.0","text":"CRAN release: 2023-10-20","code":""},{"path":"/news/index.html","id":"major-improvements-2-3-0","dir":"Changelog","previous_headings":"","what":"Major improvements","title":"missRanger 2.3.0","text":"missRanger() now works syntactically wrong variable names like “1bad:variable”. solves old issue, recently popping new issue. missRanger() now works number features, long formula left default, .e., . ~ .. solves issue.","code":""},{"path":"/news/index.html","id":"other-changes-2-3-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"missRanger 2.3.0","text":"Documentation improvement. ranger() now called via x/y interface, formula interface anymore.","code":""},{"path":"/news/index.html","id":"missranger-221","dir":"Changelog","previous_headings":"","what":"missRanger 2.2.1","title":"missRanger 2.2.1","text":"CRAN release: 2023-04-28 Switch importFrom :: code style Documentation improved","code":""},{"path":"/news/index.html","id":"missranger-220","dir":"Changelog","previous_headings":"","what":"missRanger 2.2.0","title":"missRanger 2.2.0","text":"CRAN release: 2023-03-24","code":""},{"path":"/news/index.html","id":"less-dependencies-2-2-0","dir":"Changelog","previous_headings":"","what":"Less dependencies","title":"missRanger 2.2.0","text":"Removed {mice} “suggested” packages. Removed {dplyr} “suggested” packages. Removed {survival} “suggested” packages.","code":""},{"path":"/news/index.html","id":"maintenance-2-2-0","dir":"Changelog","previous_headings":"","what":"Maintenance","title":"missRanger 2.2.0","text":"Adding Github pages. Introduction Github actions.","code":""},{"path":"/news/index.html","id":"missranger-215-not-on-cran","dir":"Changelog","previous_headings":"","what":"missRanger 2.1.5 (not on CRAN)","title":"missRanger 2.1.5 (not on CRAN)","text":"Maintenance release, switching testthat 3, changing package structure, bringing vignettes right order.","code":""},{"path":[]},{"path":"/news/index.html","id":"minor-changes-2-1-4","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"missRanger 2.1.4 (not on CRAN)","text":"Now using progress bar instead “.” show progress (verbose = 1).","code":""},{"path":[]},{"path":"/news/index.html","id":"maintenance-update-2-1-2","dir":"Changelog","previous_headings":"","what":"Maintenance update","title":"missRanger 2.1.2 and 2.1.3","text":"Fixing failing unit tests.","code":""},{"path":"/news/index.html","id":"missranger-211","dir":"Changelog","previous_headings":"","what":"missRanger 2.1.1","title":"missRanger 2.1.1","text":"CRAN release: 2021-03-20","code":""},{"path":"/news/index.html","id":"minor-changes-2-1-1","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"missRanger 2.1.1","text":"Allow use “mtry” suggested Thomas Lumley. Recommended values NULL (default), 1 function number covariables m, e.g. mtry = function(m) max(1, m %/% 3). Keep mind missRanger() might use growing set covariables first iteration process, passing mtry = 2 might result error.","code":""},{"path":"/news/index.html","id":"documentation-2-1-1","dir":"Changelog","previous_headings":"","what":"Documentation","title":"missRanger 2.1.1","text":"Improved help pages. Splitted long vignette three shorter ones.","code":""},{"path":"/news/index.html","id":"other-2-1-1","dir":"Changelog","previous_headings":"","what":"Other","title":"missRanger 2.1.1","text":"Added unit tests.","code":""},{"path":"/news/index.html","id":"missranger-210","dir":"Changelog","previous_headings":"","what":"missRanger 2.1.0","title":"missRanger 2.1.0","text":"CRAN release: 2019-06-30 summary changes since version 1.x.x.","code":""},{"path":"/news/index.html","id":"major-changes-2-1-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"missRanger 2.1.0","text":"missRanger now also imputes uses logical variables, character variables variables mode numeric like dates times. Added formula interface specify variables impute (left hand side) used (right hand side). (pseudo) examples: . ~ . (default): Use variables impute variables. Note missing values imputed. Variables without missings used impute others. . ~ . - ID: Use variables except ID impute missing values. Species ~ Sepal.Width: Use Sepal.Width impute Species. works Sepal.Width contain missing values. (Add right hand side .) Species + Sepal.Length ~ Species + Petal.Length: Use Species Petal.Length impute Species Sepal.Length. works Petal.Length contain missing values appear left hand side therefore imputed . . ~ 1: Univariate imputation relevant columns (nothing selected right hand side). first argument generateNA called x instead data consistency imputeUnivariate. imputeUnivariate now also works data frames matrices. PMM mode, missRanger relies OOB predictions. smaller value num.trees, higher risk missing OOB predictions, caused error PMM. Now, pmm allows missing values xtrain ytrain. Thus, algorithm even work num.trees = 1. useful impute large data sets PMM.","code":""},{"path":"/news/index.html","id":"minor-changes-2-1-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"missRanger 2.1.0","text":"function imputeUnivariate received seed argument. function imputeUnivariate received v argument, specifying columns impute. function generateNA offers now possibility use different proportions missings column. verbose 0, missRanger show variables imputed order variables used imputation.","code":""},{"path":"/news/index.html","id":"minor-bug-fix-2-1-0","dir":"Changelog","previous_headings":"","what":"Minor bug fix","title":"missRanger 2.1.0","text":"argument returnOOB now effectively controlling --bag errors attached attribute “oob” resulting data frame . far, always attached.","code":""}]
